(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),c=t.n(a)()(o());c.push([e.id,".projects {\n    background-color: lightyellow;\n    border: 2px solid yellow;\n    font-size: 40px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project {\n    background-color: lightsalmon;\n    border: 2px solid salmon;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.task {\n    background-color:lightpink;\n    padding: 10px;\n    border: 2px solid pink;\n}\n\nform {\n    background-color: aliceblue;\n    border: 2px solid darkblue;\n    border-radius: 5px;\n    padding: 10px;\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: auto;\n    gap: 10px;\n}\n\nform > input,\nform > label,\ndiv > input {\n    font-size: 30px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6BAA6B;IAC7B,wBAAwB;IACxB,eAAe;IACf,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,6BAA6B;IAC7B,wBAAwB;IACxB,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;IAC3B,0BAA0B;IAC1B,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,SAAS;AACb;;AAEA;;;IAGI,eAAe;AACnB",sourcesContent:[".projects {\n    background-color: lightyellow;\n    border: 2px solid yellow;\n    font-size: 40px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project {\n    background-color: lightsalmon;\n    border: 2px solid salmon;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.task {\n    background-color:lightpink;\n    padding: 10px;\n    border: 2px solid pink;\n}\n\nform {\n    background-color: aliceblue;\n    border: 2px solid darkblue;\n    border-radius: 5px;\n    padding: 10px;\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: auto;\n    gap: 10px;\n}\n\nform > input,\nform > label,\ndiv > input {\n    font-size: 30px;\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(c[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),c=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(c).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var d=e[i],s=r.base?d[0]+r.base:d[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var u=t(p),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var f=o(m,r);r.byIndex=i,n.splice(i,0,{identifier:p,updater:f,references:1})}c.push(p)}return c}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=t(a[c]);n[i].references--}for(var d=r(e,o),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=(()=>{const e=[];return{addProject:function(n){const t=function(e){const n=[];return{getName:function(){return e},addTask:function(e){const t=function(e){return{get_name:function(){return e}}}(e);return n.push(t),t},getTasks:function(){return Array(...n)}}}(n);return e.push(t),t},getProjects:function(){return Array(...e)}}})();var n=t(379),r=t.n(n),o=t(795),a=t.n(o),c=t(569),i=t.n(c),d=t(565),s=t.n(d),l=t(216),p=t.n(l),u=t(589),m=t.n(u),f=t(426),A={};A.styleTagTransform=m(),A.setAttributes=s(),A.insert=i().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=p(),r()(f.Z,A),f.Z&&f.Z.locals&&f.Z.locals,(()=>{let n=e.addProject("project1"),t=e.addProject("project2");n.addTask("task1"),n.addTask("task2"),t.addTask("task3"),document.querySelector("body").appendChild(function(){const n=document.createElement("div");return n.classList.add("content"),n.appendChild(function(){function n(e){function n(e){const n=document.createElement("div");return n.classList.add("task"),n.innerText=e.get_name(),n}let t=!1;const r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("input");return o.innerText=e.getName(),o.classList.add("project-name"),r.classList.add("project"),r.appendChild(o),r.addEventListener("click",(o=>{!function(e,r){if(t){const n=[];for(const t of e.children)t.classList.contains("project-name")||n.push(t);n.forEach((e=>{e.remove()}))}else{e.appendChild(a);for(const t of r.getTasks())e.appendChild(n(t))}t=!t}(r,e)})),a.type="button",a.value="Add Task",a.addEventListener("click",(t=>{t.stopPropagation(),r.insertBefore(function(e,t){const r=document.createElement("form"),o=document.createElement("label"),a=document.createElement("input"),c=document.createElement("label"),i=document.createElement("input"),d=document.createElement("label"),s=document.createElement("input"),l=document.createElement("label"),p=document.createElement("input"),u=document.createElement("input");return o.innerText="Task Name",o.htmlFor="task-name",a.id="task-name",c.innerText="Description",c.htmlFor="task-description",i.id="task-description",d.innerText="Due Date",d.htmlFor="task-due-date",s.id="task-due-date",s.type="date",l.innerText="Priority",l.htmlFor="task-priority",p.id="task-priority",u.value="Add Task",u.type="button",u.addEventListener("click",(o=>{const c=""===a.value?"Unnamed task":a.value,i=t.addTask(c);e.appendChild(n(i)),r.remove()})),r.appendChild(o),r.appendChild(a),r.appendChild(c),r.appendChild(i),r.appendChild(d),r.appendChild(s),r.appendChild(l),r.appendChild(p),r.appendChild(u),r.addEventListener("click",(e=>{e.stopPropagation()})),r}(r,e),a)})),r}const t=document.createElement("div");t.classList.add("projects"),t.appendChild(function(t){const r=document.createElement("form"),o=document.createElement("label"),a=document.createElement("input"),c=document.createElement("input");return o.innerText="Project Title",o.htmlFor="project-title",a.id="project-title",c.type="button",c.value="Add Project",c.addEventListener("click",(r=>{const o=""===a.value?"Untitled Project":a.value,c=e.addProject(o);t.appendChild(n(c)),a.value=""})),r.classList.add("create-project"),r.appendChild(o),r.appendChild(a),r.appendChild(c),r}(t));for(let r of e.getProjects())t.appendChild(n(r));return t}()),n}())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,