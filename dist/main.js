(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".projects {\n    background-color: lightyellow;\n    border: 2px solid yellow;\n    border-radius: 10px;\n    font-size: 40px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project {\n    background-color: lightsalmon;\n    border: 2px solid salmon;\n    border-radius: 10px;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.task {\n    background-color:lightpink;\n    padding: 10px;\n    border: 2px solid pink;\n    border-radius: 10px;\n}\n\n.project > .project-name,\n.task > .task-name {\n    font-weight: 600;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n}\n\n.delete {\n    background-color: red;\n    color: white;\n    border: 2px solid darkred;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.delete:hover {\n    background-color: darkred;\n}\n\nform {\n    background-color: aliceblue;\n    border: 2px solid darkblue;\n    border-radius: 5px;\n    padding: 10px;\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: auto;\n    gap: 10px;\n}\n\nform > input,\nform > label,\ndiv > input {\n    font-size: 30px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6BAA6B;IAC7B,wBAAwB;IACxB,mBAAmB;IACnB,eAAe;IACf,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,6BAA6B;IAC7B,wBAAwB;IACxB,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;;IAEI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,2BAA2B;IAC3B,0BAA0B;IAC1B,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,SAAS;AACb;;AAEA;;;IAGI,eAAe;AACnB",sourcesContent:[".projects {\n    background-color: lightyellow;\n    border: 2px solid yellow;\n    border-radius: 10px;\n    font-size: 40px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project {\n    background-color: lightsalmon;\n    border: 2px solid salmon;\n    border-radius: 10px;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.task {\n    background-color:lightpink;\n    padding: 10px;\n    border: 2px solid pink;\n    border-radius: 10px;\n}\n\n.project > .project-name,\n.task > .task-name {\n    font-weight: 600;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n}\n\n.delete {\n    background-color: red;\n    color: white;\n    border: 2px solid darkred;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.delete:hover {\n    background-color: darkred;\n}\n\nform {\n    background-color: aliceblue;\n    border: 2px solid darkblue;\n    border-radius: 5px;\n    padding: 10px;\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: auto;\n    gap: 10px;\n}\n\nform > input,\nform > label,\ndiv > input {\n    font-size: 30px;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],s=r.base?d[0]+r.base:d[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var u=t(p),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var m=o(A,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var d=r(e,o),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{function e(e,n,t,r){return{getName:function(){return e},getDescription:function(){return n},getDueDate:function(){return t},getPriority:function(){return r}}}const n=(()=>{function n(e){let n;try{n=window[e];let t="__storage_test__";return n.setItem(t,t),n.removeItem(t),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&n&&0!==n.length}}function t(){n("localStorage")&&localStorage.setItem("projects",JSON.stringify(r.map((e=>({name:e.getName(),tasks:e.getTasks().map((e=>({name:e.getName(),description:e.getDescription(),"due-date":e.getDueDate(),priority:e.getPriority()})))})))))}let r=[];function o(n){const r=[];return{getName:function(){return n},addTask:function(n,o,a,i){const c=e(n,o,a,i);return r.push(c),t(),c},getTasks:function(){return Array(...r)},removeTask:function(e){for(let n=0;n<r.length;n++)if(e===r[n]){r.splice(n,1),t();break}},parseTasks:function(n){for(const t of n)r.push(e(t.name,t.description,t["due-date"],t.priority))}}}return function(){if(n("localStorage")){const e=localStorage.getItem("projects");e&&(r=JSON.parse(e).map((e=>{let n=o(e.name);return n.parseTasks(e.tasks),n})))}}(),{addProject:function(e){const n=o(e);return r.push(n),t(),n},getProjects:function(){return Array(...r)},removeProject:function(e){for(let n=0;n<r.length;n++)if(e===r[n]){r.splice(n,1),t();break}}}})();function r(e,n){let t=!1;const r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("input"),c=document.createElement("div"),d=document.createElement("div"),s=document.createElement("div");return r.classList.add("task"),a.innerText=e.getName(),a.classList.add("task-name"),i.type="button",i.value="X",i.classList.add("delete"),i.addEventListener("click",(t=>{t.stopPropagation(),r.remove(),n.removeTask(e)})),o.classList.add("header"),o.appendChild(a),o.appendChild(i),c.innerText=e.getDescription(),d.innerText=`Due Date: ${e.getDueDate()}`,s.innerText=`Priority: ${e.getPriority()}`,r.appendChild(o),r.addEventListener("click",(e=>{e.stopPropagation(),function(){if(t){const e=[];for(const n of r.children)n.classList.contains("header")||e.push(n);e.forEach((e=>{e.remove()}))}else r.appendChild(c),r.appendChild(d),r.appendChild(s);t=!t}()})),r}const o=function(e){let t=!1;const o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),c=document.createElement("input"),d=document.createElement("input");return a.innerText=e.getName(),a.classList.add("project-name"),c.type="button",c.value="X",c.classList.add("delete"),c.addEventListener("click",(t=>{t.stopPropagation(),o.remove(),n.removeProject(e)})),i.classList.add("header"),i.appendChild(a),i.appendChild(c),d.type="button",d.value="Add Task",d.addEventListener("click",(n=>{n.stopPropagation(),o.insertBefore(function(e,n){const t=document.createElement("form"),o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("label"),c=document.createElement("input"),d=document.createElement("label"),s=document.createElement("input"),l=document.createElement("label"),p=document.createElement("input"),u=document.createElement("input");return o.innerText="Task Name",o.htmlFor="task-name",a.id="task-name",i.innerText="Description",i.htmlFor="task-description",c.id="task-description",d.innerText="Due Date",d.htmlFor="task-due-date",s.id="task-due-date",s.type="date",l.innerText="Priority",l.htmlFor="task-priority",p.id="task-priority",p.type="number",u.value="Add Task",u.type="button",u.addEventListener("click",(o=>{const i=""===a.value?"Unnamed task":a.value,d=c.value,l=s.value,u=p.value,A=n.addTask(i,d,l,u);e.appendChild(r(A,n)),t.remove()})),t.appendChild(o),t.appendChild(a),t.appendChild(i),t.appendChild(c),t.appendChild(d),t.appendChild(s),t.appendChild(l),t.appendChild(p),t.appendChild(u),t.addEventListener("click",(e=>{e.stopPropagation()})),t}(o,e),d)})),o.classList.add("project"),o.addEventListener("click",(n=>{!function(e,n){if(t){const n=[];for(const t of e.children)t.classList.contains("header")||n.push(t);n.forEach((e=>{e.remove()}))}else{e.appendChild(d);for(const t of n.getTasks())e.appendChild(r(t,n))}t=!t}(o,e)})),o.appendChild(i),o};var a=t(379),i=t.n(a),c=t(795),d=t.n(c),s=t(569),l=t.n(s),p=t(565),u=t.n(p),A=t(216),m=t.n(A),f=t(589),v=t.n(f),h=t(426),g={};g.styleTagTransform=v(),g.setAttributes=u(),g.insert=l().bind(null,"head"),g.domAPI=d(),g.insertStyleElement=m(),i()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals,document.querySelector("body").appendChild(function(){const e=document.createElement("div");return e.classList.add("content"),e.appendChild(function(){const e=document.createElement("div");e.classList.add("projects"),e.appendChild(function(e){const t=document.createElement("form"),r=document.createElement("label"),a=document.createElement("input"),i=document.createElement("input");return r.innerText="Project Title",r.htmlFor="project-title",a.id="project-title",i.type="button",i.value="Add Project",i.addEventListener("click",(t=>{const r=""===a.value?"Untitled Project":a.value,i=n.addProject(r);e.appendChild(o(i)),a.value=""})),t.classList.add("create-project"),t.appendChild(r),t.appendChild(a),t.appendChild(i),t}(e));for(let t of n.getProjects())e.appendChild(o(t));return e}()),e}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,