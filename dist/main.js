(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,".projects {\n    background-color: lightyellow;\n    border: 2px solid yellow;\n    border-radius: 10px;\n    font-size: 40px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project {\n    background-color: lightsalmon;\n    border: 2px solid salmon;\n    border-radius: 10px;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.task {\n    background-color:lightpink;\n    padding: 10px;\n    border: 2px solid pink;\n    border-radius: 10px;\n}\n\n.project > .project-name,\n.task > .task-name {\n    font-weight: 600;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n}\n\n.delete {\n    background-color: red;\n    color: white;\n    border: 2px solid darkred;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.delete:hover {\n    background-color: darkred;\n}\n\nform {\n    background-color: aliceblue;\n    border: 2px solid darkblue;\n    border-radius: 5px;\n    padding: 10px;\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: auto;\n    gap: 10px;\n}\n\nform > input,\nform > label,\ndiv > input {\n    font-size: 30px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6BAA6B;IAC7B,wBAAwB;IACxB,mBAAmB;IACnB,eAAe;IACf,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,6BAA6B;IAC7B,wBAAwB;IACxB,mBAAmB;IACnB,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;;IAEI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,2BAA2B;IAC3B,0BAA0B;IAC1B,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,8BAA8B;IAC9B,wBAAwB;IACxB,SAAS;AACb;;AAEA;;;IAGI,eAAe;AACnB",sourcesContent:[".projects {\n    background-color: lightyellow;\n    border: 2px solid yellow;\n    border-radius: 10px;\n    font-size: 40px;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project {\n    background-color: lightsalmon;\n    border: 2px solid salmon;\n    border-radius: 10px;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.task {\n    background-color:lightpink;\n    padding: 10px;\n    border: 2px solid pink;\n    border-radius: 10px;\n}\n\n.project > .project-name,\n.task > .task-name {\n    font-weight: 600;\n}\n\n.header {\n    display: flex;\n    justify-content: space-between;\n}\n\n.delete {\n    background-color: red;\n    color: white;\n    border: 2px solid darkred;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.delete:hover {\n    background-color: darkred;\n}\n\nform {\n    background-color: aliceblue;\n    border: 2px solid darkblue;\n    border-radius: 5px;\n    padding: 10px;\n    display: grid;\n    grid-template-columns: 1fr 5fr;\n    grid-template-rows: auto;\n    gap: 10px;\n}\n\nform > input,\nform > label,\ndiv > input {\n    font-size: 30px;\n}"],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],d=0;d<e.length;d++){var c=e[d],s=r.base?c[0]+r.base:c[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var u=t(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var m=o(A,r);r.byIndex=d,n.splice(d,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=t(a[i]);n[d].references--}for(var c=r(e,o),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=(()=>{let e=[];return{addProject:function(n){const t=function(e){const n=[];return{getName:function(){return e},addTask:function(e,t,r,o){const a=function(e,n,t,r){return{getName:function(){return e},getDescription:function(){return n},getDueDate:function(){return t},getPriority:function(){return r}}}(e,t,r,o);return n.push(a),a},getTasks:function(){return Array(...n)},removeTask:function(e){for(let t=0;t<n.length;t++)if(e===n[t]){n.splice(t,1);break}}}}(n);return e.push(t),t},getProjects:function(){return Array(...e)},removeProject:function(n){for(let t=0;t<e.length;t++)if(n===e[t]){e.splice(t,1);break}}}})();function n(e,n){let t=!1;const r=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("input"),d=document.createElement("div"),c=document.createElement("div"),s=document.createElement("div");return r.classList.add("task"),a.innerText=e.getName(),a.classList.add("task-name"),i.type="button",i.value="X",i.classList.add("delete"),i.addEventListener("click",(t=>{t.stopPropagation(),r.remove(),n.removeTask(e)})),o.classList.add("header"),o.appendChild(a),o.appendChild(i),d.innerText=e.getDescription(),c.innerText=`Due Date: ${e.getDueDate()}`,s.innerText=`Priority: ${e.getPriority()}`,r.appendChild(o),r.addEventListener("click",(e=>{e.stopPropagation(),function(){if(t){const e=[];for(const n of r.children)console.log(n),n.classList.contains("header")||e.push(n);e.forEach((e=>{e.remove()}))}else r.appendChild(d),r.appendChild(c),r.appendChild(s);t=!t}()})),r}const r=function(t){let r=!1;const o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),d=document.createElement("input"),c=document.createElement("input");return a.innerText=t.getName(),a.classList.add("project-name"),d.type="button",d.value="X",d.classList.add("delete"),d.addEventListener("click",(n=>{n.stopPropagation(),o.remove(),e.removeProject(t)})),i.classList.add("header"),i.appendChild(a),i.appendChild(d),c.type="button",c.value="Add Task",c.addEventListener("click",(e=>{e.stopPropagation(),o.insertBefore(function(e,t){const r=document.createElement("form"),o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("label"),d=document.createElement("input"),c=document.createElement("label"),s=document.createElement("input"),l=document.createElement("label"),p=document.createElement("input"),u=document.createElement("input");return o.innerText="Task Name",o.htmlFor="task-name",a.id="task-name",i.innerText="Description",i.htmlFor="task-description",d.id="task-description",c.innerText="Due Date",c.htmlFor="task-due-date",s.id="task-due-date",s.type="date",l.innerText="Priority",l.htmlFor="task-priority",p.id="task-priority",p.type="number",u.value="Add Task",u.type="button",u.addEventListener("click",(o=>{const i=""===a.value?"Unnamed task":a.value,c=d.value,l=s.value,u=p.value,A=t.addTask(i,c,l,u);e.appendChild(n(A,t)),r.remove()})),r.appendChild(o),r.appendChild(a),r.appendChild(i),r.appendChild(d),r.appendChild(c),r.appendChild(s),r.appendChild(l),r.appendChild(p),r.appendChild(u),r.addEventListener("click",(e=>{e.stopPropagation()})),r}(o,t),c)})),o.classList.add("project"),o.addEventListener("click",(e=>{!function(e,t){if(r){const n=[];for(const t of e.children)t.classList.contains("header")||n.push(t);n.forEach((e=>{e.remove()}))}else{e.appendChild(c);for(const r of t.getTasks())e.appendChild(n(r,t))}r=!r}(o,t)})),o.appendChild(i),o};var o=t(379),a=t.n(o),i=t(795),d=t.n(i),c=t(569),s=t.n(c),l=t(565),p=t.n(l),u=t(216),A=t.n(u),m=t(589),f=t.n(m),h=t(426),v={};v.styleTagTransform=f(),v.setAttributes=p(),v.insert=s().bind(null,"head"),v.domAPI=d(),v.insertStyleElement=A(),a()(h.Z,v),h.Z&&h.Z.locals&&h.Z.locals,(()=>{let n=e.addProject("project1"),t=e.addProject("project2");n.addTask("task1","A random task","3/4/2022",1),n.addTask("task2","Another random task","5/6/2022",1),t.addTask("task3","A high priority task","7/8/2022",100),document.querySelector("body").appendChild(function(){const n=document.createElement("div");return n.classList.add("content"),n.appendChild(function(){const n=document.createElement("div");n.classList.add("projects"),n.appendChild(function(n){const t=document.createElement("form"),o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("input");return o.innerText="Project Title",o.htmlFor="project-title",a.id="project-title",i.type="button",i.value="Add Project",i.addEventListener("click",(t=>{const o=""===a.value?"Untitled Project":a.value,i=e.addProject(o);n.appendChild(r(i)),a.value=""})),t.classList.add("create-project"),t.appendChild(o),t.appendChild(a),t.appendChild(i),t}(n));for(let t of e.getProjects())n.appendChild(r(t));return n}()),n}())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,